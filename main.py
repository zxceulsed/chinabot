# bot.py

import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputFile
from keyboards import main_menu_keyboard, FAQ_keyboard, society_keyboard,otzivi_keyboard, raschit_keyboard,nazad_v_menu_keyboard, oform_keyboard,TOVAR_keyboard
import os
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
import sqlite3

API_TOKEN = '7220938510:AAG5hMlCREOXmgFJyXoc1cVZOm1RLBC5Cd4'
ADMIN_IDS = [7120064259,1085598151]
class OrderStates(StatesGroup):
    waiting_for_price_buttons = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã (–∏–∑ –∫–Ω–æ–ø–æ–∫)
    waiting_for_photo = State()          # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
    waiting_for_link = State()           # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
    waiting_for_price_link = State()     # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã (–ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏)
    waiting_for_new_rate = State()
    waiting_for_delete_item = State()

async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    button_data = {
        "Poizon": {
            "text": """
1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ Poizon –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–≤–æ–π""",
            "photos": ["poizon_image1.jpg", "poizon_image2.jpg"],
        },
        "Taobao": {
            "text": """1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ Taobao –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–≤–µ—Ä—Ö—É""",
            "photos": ["photo1_taobao.jpg", "photo2_taobao.jpg"],
        },
        "1688": {
            "text": """1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ 1688 –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É (–æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–Ω–∏–∑—É""",
            "photos": ["photo1_1688.jpg", "photo2_1688.jpg"],
        },
        "Pinduoduo": {
            "text": """1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ Pinduoduo. –í –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞ —Å–Ω–∏–∑—É 2 –∫–Ω–æ–ø–∫–∏ (üîµ - –æ–¥–∏–Ω–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞, üü¢ - –ø–∞—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞)
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç/—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–≤–µ—Ä—Ö—É""",
            "photos": ["photo1_pinduoduo.jpg", "photo2_pinduoduo.jpg"],
        },
        "95": {
            "text": """
1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–æ–≤–∞—Ä –Ω–∞ 95 –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±–≤–µ–¥—ë–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–Ω–∞ –Ω–∞ –∑–µ–ª—ë–Ω–æ–π –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É""",
            "photos": ["photo1_95.jpg", "photo2_95.jpg"],
        },
    }

    def create_db():
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
        conn = sqlite3.connect('currency.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS currency (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            rate REAL
        )
        ''')

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,   -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
            user_id INTEGER,                        -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            link TEXT,                              -- –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
            price_yuan FLOAT,                       -- –¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö
            price_byn FLOAT,                        -- –¶–µ–Ω–∞ –≤ BYN
            photo TEXT                              -- –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
        )
        ''')

        conn.commit()
        conn.close()

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    create_db()



    @dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å")
    async def handle_change_rate(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞.")
        await state.set_state(OrderStates.waiting_for_new_rate)


    @dp.message(OrderStates.waiting_for_new_rate)
    async def process_new_rate(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            new_rate = float(message.text)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å
        conn = sqlite3.connect('currency.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute('SELECT * FROM currency WHERE id = 1')
        result = cursor.fetchone()
        
        if result is None:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
            cursor.execute('INSERT INTO currency (rate) VALUES (?)', (new_rate,))
            await message.answer(f"–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_rate} BYN.")
        else:
            # –ï—Å–ª–∏ –∫—É—Ä—Å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            cursor.execute('UPDATE currency SET rate = ? WHERE id = 1', (new_rate,))
            await message.answer(f"–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {new_rate} BYN.")
        
        conn.commit()
        conn.close()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.clear()

    @dp.message(CommandStart())
    async def cmd_start(message: Message):
        await message.answer("üîé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=main_menu_keyboard())


    @dp.message(F.text == "‚ùì–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    async def FAQ_cmd(message:Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –º–µ–Ω—é.",reply_markup=FAQ_keyboard())


    @dp.message(F.text == "–ö—Ç–æ –º—ã?")
    async def first_question(message:Message):
        await message.answer("–ú—ã —è–≤–ª—è–µ–º—Å—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –≤ —Ä–∞–±–æ—Ç–µ —Å –ö–∏—Ç–∞–µ–º. –ß–µ—Ä–µ–∑ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —Ç–æ–≤–∞—Ä, —Å –ª—é–±–æ–≥–æ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞ üá®üá≥")

    @dp.message(F.text == "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞—Å—á—ë—Ç?")
    async def second_question(message: Message):
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('currency.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT rate FROM currency WHERE id = 1')
        result = cursor.fetchone()
        conn.close()

        if result is None or result[0] == 0:
            # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 0
            await message.answer("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
        rate = float(result[0])
        actual_rate = 1 / rate
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(f"""–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1¬• = {actual_rate:.2f} BYN
    –¢.–µ. —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ ¬• ‚Ä¢ {actual_rate:.2f} BYN = —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ BYN

    + 5% –∫–æ–º–∏—Å—Å–∏—è –≤—ã–∫—É–ø–∞ (–æ–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞, —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é)""")


    @dp.message(F.text == "–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏?")
    async def third_question(message:Message):
        await message.answer("""–ó–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –∫ –Ω–∞–º –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ë–µ–ª–∞—Ä—É—Å—å

üöÄ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ - 3.5-4 –Ω–µ–¥–µ–ª–∏

üí∞ –ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:
–î–æ 5–∫–≥ - 14$/–∫–≥
–û—Ç 5–∫–≥ –¥–æ 15–∫–≥ - 12$/–∫–≥
–û—Ç 15 –¥–æ 40–∫–≥ - 10$/–∫–≥
–û—Ç 40–∫–≥ - –º–µ–Ω–µ–µ 10$/–∫–≥ (—É—Å–ª–æ–≤–∏—è –æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ)
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–∞–∫–∞–∑ –≤–∑–≤–µ—à–∏–≤–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —É–ø–∞–∫–æ–≤–∫–æ–π, –≤ –∫–æ—Ç–æ—Ä—É—é —É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç –∫–∏—Ç–∞–π—Å–∫–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ (—Ç–æ –µ—Å—Ç—å, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —Å Poizon –≤–∑–≤–µ—à–∏–≤–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –∫–æ—Ä–æ–±–∫–æ–π –±—Ä–µ–Ω–¥–∞ –∏ –∫–æ—Ä–æ–±–∫–æ–π Poizon)""")

    @dp.message(F.text == "–ö–∞–∫ —É–∑–Ω–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä?")
    async def four_question(message:Message):
        await message.answer("""–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–∂–¥–æ–º—É –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞, –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å—Ä–∞–∑—É –ø–∏—à–∏—Ç–µ –µ–º—É üëâ @frolovshop24""")

    @dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨ÖÔ∏èÔ∏èÔ∏è")
    async def back_to_menu_iz_faq(message:Message):
        await message.answer("üîé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=main_menu_keyboard())

    @dp.message(F.text == "üì± –ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏")
    async def five_cmd(message:Message):
        await message.answer("–ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏:",reply_markup=society_keyboard())


    @dp.message(F.text == "üìå –û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
    async def four_button(message:Message):
        await message.answer("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –ø–∏—à—É—Ç –æ –Ω–∞—Å –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã",reply_markup=otzivi_keyboard()) 

    @dp.message(F.text == "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    async def manager_cmd(message:Message):
        await message.answer("""–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
üëâ @frolovshop24

–¢–∞–∫–∂–µ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏""")


    @dp.message(F.text == "üõí –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞")
    async def first_cmd(message:Message):
        await message.answer("""–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    ‚ùóÔ∏è–ù–∞ –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ""",reply_markup=raschit_keyboard())
        await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π¬ª")
        await message.answer("""–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –ø–æ–º–æ–∂–µ—Ç
    üëâ@frolovshop24""")

    @dp.message(F.text == "–î—Ä—É–≥–∞—è –ø–ª–æ—â–∞–¥–∫–∞")
    async def other_place(message:Message):
        await message.answer("""–î–ª—è –∑–∞–∫–∞–∑–∞ —Å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø–ª–æ—â–∞–¥–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
üë®‚Äçüíª @frolovshop24""",reply_markup=main_menu_keyboard())

    @dp.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    async def instructions_cmd(message:Message):
        await message.answer("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞ –ø–æ–º–æ—â—å—é üëâ @frolovshop24",reply_markup=main_menu_keyboard())

    @dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚¨ÖÔ∏èÔ∏èÔ∏è")
    async def vernytsa_nazad(message:Message):
        await message.answer("üîé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=main_menu_keyboard())


    @dp.message(F.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    async def nazad_v_menu_2(message: types.Message, state: FSMContext):
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=main_menu_keyboard())
        await state.clear()


    @dp.message(F.text.in_(button_data.keys()))
    async def handle_buttons(message: types.Message, state: FSMContext):
        button_name = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        data = button_data[button_name]  # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•)\n"
            "‚ùóÔ∏è–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤–≤–æ–¥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=nazad_v_menu_keyboard()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        media = []
        for index, photo_path in enumerate(data["photos"]):
            if index == 0:
                media.append(InputMediaPhoto(media=FSInputFile(photo_path), caption=data["text"]))
            else:
                media.append(InputMediaPhoto(media=FSInputFile(photo_path)))

        try:
            await bot.send_media_group(chat_id=message.chat.id, media=media)
        except TelegramBadRequest:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã.")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
        await state.set_state(OrderStates.waiting_for_price_buttons)

    @dp.message(OrderStates.waiting_for_price_buttons)
    async def calculate_price_buttons(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('currency.db')
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('SELECT rate FROM currency WHERE id = 1')
            result = cursor.fetchone()
            conn.close()

            if result is None or result[0] == 0:
                await message.answer("–ö—É—Ä—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            rate = float(result[0])

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É
            price = float(message.text)
            final_price = (price + price * 0.17) / rate  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
            await message.answer(
                f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:.2f} BYN\n"
                "+ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–µ–ª–∞—Ä—É—Å—å, —á–µ–º –±–æ–ª—å—à–µ –≤–µ—Å, —Ç–µ–º –¥–µ—à–µ–≤–ª–µ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –∫–≥)\n"
                "+ —É—Å–ª—É–≥–∏ –ø–æ—á—Ç—ã", 
                reply_markup=oform_keyboard()
            )
            await state.clear()
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ).")


    @dp.message(F.text== "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üìù")
    async def oform_cmd(message:Message,state:FSMContext):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞",reply_markup=nazad_v_menu_keyboard())
        await state.set_state(OrderStates.waiting_for_photo)

    @dp.message(OrderStates.waiting_for_photo)
    async def process_photo(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        if message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≤–µ—Ä—Å–∏—è)
            photo = message.photo[-1]  # –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –≤ FSM
            photo_link = photo.file_id

            await state.update_data(photo=photo_link)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ

            await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
            await state.set_state(OrderStates.waiting_for_link)
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")



    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
    @dp.message(OrderStates.waiting_for_link)
    async def process_link(message: types.Message, state: FSMContext):
        link = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        await state.update_data(link=link)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•).")
        await state.set_state(OrderStates.waiting_for_price_link)

    def get_current_rate():
        conn = sqlite3.connect('currency.db')
        cursor = conn.cursor()
        cursor.execute('SELECT rate FROM currency WHERE id = 1')
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å –∏–ª–∏ 1, –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω


    @dp.message(OrderStates.waiting_for_price_link)
    async def process_price(message: Message, state: FSMContext):
        try:
            price_yuan = float(message.text)
            rate = get_current_rate()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            price_byn = (price_yuan + price_yuan * 0.17) / rate  # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≤ BYN

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ FSM
            data = await state.get_data()
            link = data.get("link")
            photo = data.get("photo")
            user_id = message.from_user.id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('currency.db')
            cursor = conn.cursor()
            cursor.execute('''
            INSERT INTO orders (user_id, link, price_yuan, price_byn, photo)
            VALUES (?, ?, ?, ?, ?)
            ''', (user_id, link, price_yuan, price_byn, photo))
            conn.commit()
            conn.close()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('currency.db')
            cursor = conn.cursor()
            cursor.execute('SELECT link, price_byn, photo FROM orders WHERE user_id = ?', (user_id,))
            orders = cursor.fetchall()
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            total_price = sum(order[1] for order in orders)  # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ü–µ–Ω—ã –≤ BYN
            items_list = "\n".join([f"{i+1}. {order[0]} | {order[1]:.2f} BYN" for i, order in enumerate(orders)])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
            media_group = []
            for index, order in enumerate(orders):
                if index == 0:
                    media_group.append(InputMediaPhoto(media=order[2], caption=(
                        f"üõí –¢–æ–≤–∞—Ä–æ–≤: {len(orders)}\n"
                        f"{items_list}\n\n"
                        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price:.2f} BYN\n\n"
                        "üöõ –ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–µ–ª–∞—Ä—É—Å—å –≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∏—Ç–∞–π-–ë–µ–ª–∞—Ä—É—Å—å + –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ—á—Ç—ã –¥–æ –≤–∞—Å"
                    )))
                else:
                    media_group.append(InputMediaPhoto(media=order[2]))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            try:
                await message.answer_media_group(media=media_group)
            except TelegramBadRequest:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã.")
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
                reply_markup=TOVAR_keyboard()
            )
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            await state.clear()

        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.")


    @dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É")
    async def zayavka_cmd(message: Message):
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('currency.db')
        cursor = conn.cursor()
        cursor.execute('SELECT link, price_yuan, price_byn, photo FROM orders WHERE user_id = ?', (user_id,))
        orders = cursor.fetchall()
        conn.close()

        if not orders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        total_price = sum(order[2] for order in orders)
        items_list = "\n".join([f"{i+1}. {order[0]} | {order[1]:.2f} ¬• | {order[2]:.2f} BYN" for i, order in enumerate(orders)])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = message.from_user
        username = f"@{user.username}" if user.username else user.full_name
        user_link = f"[{username}](tg://user?id={user.id})"

        caption = (
            f"üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É:\n\n"
            f"{items_list}\n\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price:.2f} BYN\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                media_group = []
                for index, order in enumerate(orders):
                    if index == 0:
                        media_group.append(InputMediaPhoto(
                            media=order[3],
                            caption=caption,
                            parse_mode="Markdown"
                        ))
                    else:
                        media_group.append(InputMediaPhoto(media=order[3]))

                await bot.send_media_group(chat_id=admin_id, media=media_group)

            except TelegramBadRequest:
                await bot.send_message(admin_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É!", reply_markup=main_menu_keyboard())
            
    @dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –¢–æ–≤–∞—Ä")
    async def otmena_zakaza(message: Message, state: FSMContext):
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('currency.db')
        cursor = conn.cursor()
        cursor.execute('SELECT rowid, link, price_byn FROM orders WHERE user_id = ?', (user_id,))
        orders = cursor.fetchall()
        conn.close()

        if not orders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        items = {i + 1: order[0] for i, order in enumerate(orders)}  # –ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ -> rowid –∏–∑ –ë–î
        await state.update_data(items=items)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
        items_list = "\n".join([f"{i+1}. {order[1]} | {order[2]:.2f} BYN" for i, order in enumerate(orders)])
        await message.answer(
            f"–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n{items_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        await state.set_state(OrderStates.waiting_for_delete_item)


    @dp.message(OrderStates.waiting_for_delete_item)
    async def process_delete_item(message: Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            items = data.get("items")

            # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
            item_number = int(message.text)
            if item_number not in items:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            rowid_to_delete = items[item_number]
            conn = sqlite3.connect('currency.db')
            cursor = conn.cursor()
            cursor.execute('DELETE FROM orders WHERE rowid = ?', (rowid_to_delete,))
            conn.commit()
            conn.close()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            conn = sqlite3.connect('currency.db')
            cursor = conn.cursor()
            cursor.execute('SELECT link, price_byn, photo FROM orders WHERE user_id = ?', (message.from_user.id,))
            updated_orders = cursor.fetchall()
            conn.close()

            if not updated_orders:
                await message.answer("–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_menu_keyboard())
                await state.clear()
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
            media_group = []
            total_price = sum(order[1] for order in updated_orders)  # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ü–µ–Ω—ã –≤ BYN
            updated_items_list = "\n".join(
                [f"{i+1}. {order[0]} | {order[1]:.2f} BYN" for i, order in enumerate(updated_orders)]
            )

            for index, order in enumerate(updated_orders):
                if index == 0:
                    media_group.append(
                        InputMediaPhoto(
                            media=order[2],
                            caption=(
                                f"üõí –í–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
                                f"{updated_items_list}\n\n"
                                f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price:.2f} BYN\n\n"
                                "üöõ –ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–µ–ª–∞—Ä—É—Å—å –≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∏—Ç–∞–π-–ë–µ–ª–∞—Ä—É—Å—å + –∑–∞ —É—Å–ª—É–≥–∏ –ø–æ—á—Ç—ã –¥–æ –≤–∞—Å."
                            )
                        )
                    )
                else:
                    media_group.append(InputMediaPhoto(media=order[2]))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            await message.answer_media_group(media=media_group)

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            await state.clear()

        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")



    @dp.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    async def otmena_zakaza(message: Message):
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('currency.db')
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
            cursor.execute('DELETE FROM orders WHERE user_id = ?', (user_id,))
            conn.commit()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã.",reply_markup=main_menu_keyboard())

        except sqlite3.Error as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    @dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    async def add_tovar(message:Message, state:FSMContext):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞",reply_markup=nazad_v_menu_keyboard())
        await state.set_state(OrderStates.waiting_for_photo)


    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
